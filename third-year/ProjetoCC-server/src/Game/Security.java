/*  * Copyright (C) 2015 Jos√© Sousa & Nuno Carvalho * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */package Game;import java.security.*;import javax.crypto.*;import javax.crypto.spec.SecretKeySpec;import javax.xml.bind.DatatypeConverter;/** * * @author josesousa9000@gmail.com */public class Security {    private static final String ALGO = "AES";    private static final byte[] keyValue            = new byte[]{'T', 'h', 'e', 'B', 'e', 's', 't',                'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};    public static String encrypt(String Data) throws Exception {        Key key = generateKey();        Cipher c = Cipher.getInstance(ALGO);        c.init(Cipher.ENCRYPT_MODE, key);        byte[] encVal = c.doFinal(Data.getBytes());        String encryptedValue = DatatypeConverter.printBase64Binary(encVal);        return encryptedValue;    }    public static String decrypt(String encryptedData) throws Exception {        Key key = generateKey();        Cipher c = Cipher.getInstance(ALGO);        c.init(Cipher.DECRYPT_MODE, key);        byte[] decordedValue = DatatypeConverter.parseBase64Binary(encryptedData);        byte[] decValue = c.doFinal(decordedValue);        String decryptedValue = new String(decValue);        return decryptedValue;    }    private static Key generateKey() throws Exception {        Key key = new SecretKeySpec(keyValue, ALGO);        return key;    }}